import logging
from issue_iterator import SonarQubeConfig, SonarQubeIssueIterator
import requests

class FixGenerator:
    """
    A class to generate fixes for SonarQube issues using Anthropic Claude Sonnet 3.7.
    """

    def __init__(self, sonarqube_config, claude_api_key, claude_endpoint="https://api.anthropic.com/v1/complete", logger=None):
        """
        Initialize the FixGenerator.

        Args:
            sonarqube_config (SonarQubeConfig): Configuration for SonarQube.
            claude_api_key (str): API key for Anthropic Claude.
            claude_endpoint (str): Endpoint for Claude API.
            logger (logging.Logger): Logger instance.
        """
        self.sonarqube_config = sonarqube_config
        self.claude_api_key = claude_api_key
        self.claude_endpoint = claude_endpoint
        self.logger = logger or logging.getLogger(__name__)
        self.iterator = SonarQubeIssueIterator(sonarqube_config, logger=self.logger)

    def generate_fix(self, issue):
        """
        Generate a fix for a specific SonarQube issue using Claude.

        Args:
            issue (dict): Details of the SonarQube issue.

        Returns:
            str: Git patch generated by Claude.
        """
        prompt = self._create_prompt(issue)
        response = self._send_to_claude(prompt)
        return self._extract_patch_from_response(response)

    def _create_prompt(self, issue):
        """
        Create a Claude prompt for the given issue.

        Args:
            issue (dict): Details of the SonarQube issue.

        Returns:
            str: Prompt to send to Claude.
        """
        return f"""
        You are a coding assistant. Analyze the following SonarQube issue and generate a fix in the form of a Git patch.

        Issue details:
        - Key: {issue.get('key')}
        - Severity: {issue.get('severity')}
        - Message: {issue.get('message')}
        - Component: {issue.get('component')}
        - Line: {issue.get('line')}

        Please provide the fix as a valid Git patch.
        """

    def _send_to_claude(self, prompt):
        """
        Send the prompt to Anthropic Claude and get the response.

        Args:
            prompt (str): Prompt to send to Claude.

        Returns:
            dict: Response from Claude.
        """
        headers = {
            "Authorization": f"Bearer {self.claude_api_key}",
            "Content-Type": "application/json"
        }
        payload = {
            "prompt": prompt,
            "model": "claude-sonnet-3.7",
            "max_tokens_to_sample": 2048
        }

        response = requests.post(self.claude_endpoint, json=payload, headers=headers)
        response.raise_for_status()
        return response.json()

    def _extract_patch_from_response(self, response):
        """
        Extract the Git patch from the Claude response.

        Args:
            response (dict): Response from Claude.

        Returns:
            str: Extracted Git patch.
        """
        return response.get("completion", "").strip()

    def process_issues(self):
        """
        Process all SonarQube issues and generate fixes for them.

        Returns:
            dict: A dictionary mapping issue keys to their generated Git patches.
        """
        fixes = {}
        try:
            for issue in self.iterator:
                self.logger.info(f"Processing issue {issue.get('key')}")
                try:
                    patch = self.generate_fix(issue)
                    fixes[issue.get('key')] = patch
                    self.logger.info(f"Generated patch for issue {issue.get('key')}")
                except Exception as e:
                    self.logger.error(f"Error generating fix for issue {issue.get('key')}: {str(e)}")
        except Exception as e:
            self.logger.error(f"Error iterating through issues: {str(e)}")
        return fixes


# if __name__ == "__main__":
#     # Configure logging
#     logging.basicConfig(
#         level=logging.INFO,
#         format="%(asctime)s [%(levelname)s] %(message)s"
#     )
#     logger = logging.getLogger("fix_generator")

#     # SonarQube configuration
#     sonarqube_url = "http://localhost:9000"  # Replace with your SonarQube URL
#     project_key = "your_project_key"         # Replace with your project key
#     auth_token = "your_sonarqube_token"      # Replace with your SonarQube token

#     sonarqube_config = SonarQubeConfig(
#         url=sonarqube_url,
#         token=auth_token,
#         project_key=project_key
#     )

#     # Anthropic Claude API key
#     claude_api_key = "your_claude_api_key"  # Replace with your Claude API key

#     # Initialize the FixGenerator
#     fix_generator = FixGenerator(sonarqube_config, claude_api_key, logger=logger)

#     # Generate fixes for all issues
#     fixes = fix_generator.process_issues()

#     # Output the generated fixes
#     for issue_key, patch in fixes.items():
#         print(f"Issue Key: {issue_key}")
#         print(f"Git Patch:\n{patch}")
#         print("=" * 80)